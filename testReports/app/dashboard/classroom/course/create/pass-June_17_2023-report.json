{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-17T02:29:55.455Z",
    "end": "2023-06-17T02:30:29.924Z",
    "duration": 34469,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "21cca4e3-a4bf-4484-bb9f-27bec871437b",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\create.js",
      "file": "\\test\\app\\dashboard\\classroom\\course\\create.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cd207e86-75cc-41c3-8a45-4e2a5e2489de",
          "title": "Course",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\create.js",
          "file": "\\test\\app\\dashboard\\classroom\\course\\create.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Course\"",
              "fullTitle": "Course \"after all\" hook in \"Course\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} `);",
              "err": {},
              "uuid": "43e773dc-2226-45f7-87c5-6aa404ea940f",
              "parentUUID": "cd207e86-75cc-41c3-8a45-4e2a5e2489de",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Course\"",
              "fullTitle": "Course \"after each\" hook in \"Course\"",
              "timedOut": false,
              "duration": 3904,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n        console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    }\n});\nlet fileNamePath = path.resolve(`${screenshootFilePath}/${this.currentTest?.state != 'failed' ? (this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1 + '-[passed]-' + moment().tz(\"Asia/Jakarta\").format(\"YYYY-MM-DD_HH-mm-ss\") : (this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1 + '-[failed]-' + moment().tz(\"Asia/Jakarta\").format(\"YYYY-MM-DD_HH-mm-ss\") }.png`);\nawait takeScreenshot(driver, fileNamePath);\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: path.relative(fileURLToPath(import.meta.url), fileNamePath)\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "ba8af8f1-5996-461b-a4be-17f305c2b2b0",
              "parentUUID": "cd207e86-75cc-41c3-8a45-4e2a5e2489de",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Admin - Create Materi from Detail Class from browser firefox",
              "fullTitle": "Course Admin - Create Materi from Detail Class from browser firefox",
              "timedOut": false,
              "duration": 30528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\screenshoot\\\\test\\\\app\\\\dashboard\\\\classroom\\\\course\\\\create\\\\1-[passed]-2023-06-17_09-30-26.png\"\n}",
              "code": "try {\n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser, appHost);\n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', itemClass.length == 0);\n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.helpers.arrayElement([0, 1, 2])].findElement(By.css('h1.title')).click();\n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n                            // Aksi mengklik button tambah materi\n                            await driver.wait(until.elementLocated(By.css(\"i.ri-add-fill\")));\n                            await driver.findElement(By.css(\"i.ri-add-fill\")).click();\n                            await driver.wait(until.elementLocated(By.css(\".dropdown-menu.dropdown-menu-right\")));\n                            let buttonsDropdownItem = await driver.findElements(By.css(\".dropdown-menu.dropdown-menu-right button.dropdown-item\"));\n                            await buttonsDropdownItem[1].click();\n                            // Aksi mengisi form untuk membuat materi baru\n                            const {\n                                titleCourse,\n                                descriptionCourse,\n                                standardPassedCourse,\n                                typeCourse\n                            } = await createData(driver);\n                            let dataTitleCourse = await titleCourse.getAttribute(\"value\");\n                            // Periksa apakah semua elemen telah terisi\n                            const isAllFilled = await Promise.all([\n                                titleCourse.getAttribute('value'),\n                                descriptionCourse.getAttribute('value'),\n                                standardPassedCourse.getAttribute('value'),\n                                typeCourse.getAttribute('value'),\n                            ]).then(values => values.every(value => value !== ''));\n                            if (isAllFilled) {\n                                await driver.findElement(By.css(\"button[type='submit']\")).click();\n                                await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n                            }\n                            const alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n                            \n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementLocated(By.css(\"#courses .card-body\")));\n                            await driver.sleep(2000);\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.findElement(By.css(\"#courses .card .card-body .row .col\"));\n                                const innerText = await emptyCourse?.getAttribute('innerText');\n                                return innerText !== 'Memuat..';\n                            });\n                            // Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\n                            const courses = await driver.executeScript(`return document.querySelectorAll(\".card .card-body .header h4.title\")`);\n                            let findCourse = [];\n                            for (let index = 0; index < courses.length; index++) {\n                                console.log(await courses[index].getAttribute('innerText') === await dataTitleCourse, await dataTitleCourse)\n                                if (await courses[index].getAttribute('innerText') === await dataTitleCourse) {\n                                    findCourse.push(courses[index]);\n                                }\n                            }\n                            expect(isAllFilled, 'Expect all input value is filled').to.equal(true);\n                            expect(alertSuccess.length, 'Expect show alert success after created a new data').to.equal(1);\n                            expect(findCourse.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n                            const pageUrl = await driver.getCurrentUrl();\n                            expect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                        } catch (error) {\n                            // console.error(error?.stack?.split('\\n')[1]);\n                            expect.fail(error?.stack);\n                        }",
              "err": {},
              "uuid": "6fc269e7-6818-4442-b7bb-23c5e6be5f7a",
              "parentUUID": "cd207e86-75cc-41c3-8a45-4e2a5e2489de",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fc269e7-6818-4442-b7bb-23c5e6be5f7a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 30528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "app/dashboard/classroom/course/create/[status]-[datetime]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "cdn": "true",
        "timestamp": "longDate",
        "overwrite": "false",
        "reportDir": "testReports",
        "reportFilename": "app/dashboard/classroom/course/create/[status]-[datetime]-report",
        "reportPageTitle": "Laporan-Harian-Testing"
      },
      "version": "6.2.0"
    }
  }
}