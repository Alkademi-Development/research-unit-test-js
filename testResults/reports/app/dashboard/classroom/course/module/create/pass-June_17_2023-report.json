{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2023-06-17T04:04:39.728Z",
    "end": "2023-06-17T04:05:20.094Z",
    "duration": 40366,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8876a54d-be69-413c-a00e-8151c243c1ac",
      "title": "",
      "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\module\\create.js",
      "file": "\\test\\app\\dashboard\\classroom\\course\\module\\create.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b973aa91-fd88-425e-a6ae-020d459fbc64",
          "title": "Module",
          "fullFile": "D:\\allbasic\\nodejs\\selenium\\testingapp\\test\\app\\dashboard\\classroom\\course\\module\\create.js",
          "file": "\\test\\app\\dashboard\\classroom\\course\\module\\create.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Module\"",
              "fullTitle": "Module \"after all\" hook in \"Module\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log(`${' '.repeat(4)}Screenshoots test berhasil di buat, berada di folder: ${screenshootFilePath} `);",
              "err": {},
              "uuid": "b2b3db7c-e9e1-4ec6-92ec-e7e10d31ee41",
              "parentUUID": "b973aa91-fd88-425e-a6ae-020d459fbc64",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Module\"",
              "fullTitle": "Module \"after each\" hook in \"Module\"",
              "timedOut": false,
              "duration": 3940,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "fs.mkdir(screenshootFilePath, { recursive: true }, (error) => {\n    if (error) {\n        console.error(`Terjadi kesalahan dalam membuat folder screenshoot:`, error);\n    }\n});\nlet fileNamePath = path.resolve(`${screenshootFilePath}/${this.currentTest?.state != 'failed' ? (this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1 + '-[passed]-' + moment().tz(\"Asia/Jakarta\").format(\"YYYY-MM-DD_HH-mm-ss\") : (this.test?.parent.tests.findIndex(test => test.title === this.currentTest.title)) + 1 + '-[failed]-' + moment().tz(\"Asia/Jakarta\").format(\"YYYY-MM-DD_HH-mm-ss\") }.png`);\nawait takeScreenshot(driver, fileNamePath);\naddContext(this, {\n    title: 'Screenshoot-Test-Results',\n    value: \"..\\\\\" + path.relative(fileURLToPath(import.meta.url), fileNamePath)\n});\nawait driver.sleep(3000);\nawait driver.quit();",
              "err": {},
              "uuid": "f1572744-72f6-4931-91ed-86f22071fe2a",
              "parentUUID": "b973aa91-fd88-425e-a6ae-020d459fbc64",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Admin - Create Module in detail classroom from browser firefox",
              "fullTitle": "Module Admin - Create Module in detail classroom from browser firefox",
              "timedOut": false,
              "duration": 36388,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Screenshoot-Test-Results\",\n  \"value\": \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\testResults\\\\screenshoots\\\\app\\\\dashboard\\\\classroom\\\\course\\\\module\\\\create\\\\1-[passed]-2023-06-17_11-05-16.png\"\n}",
              "code": "try {\n                            // Go to application\n                            driver = await goToApp(browser, appHost);\n                            await driver.manage().window().maximize();\n                            // login to the application\n                            errorMessages = await enterDashboard(driver, user, browser, appHost);\n                            await thrownAnError(errorMessages, errorMessages?.length > 0);\n                            // Aksi Masuk ke dalam halaman class\n                            await driver.findElement(By.css('a > i.ri-icon.ri-stack-fill')).click();\n                            let cardClass = await driver.findElement(By.css(`div.card-class`));\n                            await driver.wait(until.stalenessOf(cardClass));\n                            errorMessages = await captureConsoleErrors(driver, browser);\n                            \n                            // Aksi mengecek apakah ada card class atau card classnya lebih dari 1\n                            let loadingSkeleton = await driver.findElement(By.css(`div.b-skeleton`));\n                            await driver.wait(until.stalenessOf(loadingSkeleton))\n                            let itemClass = await driver.findElements(By.css(`div.item-class`));\n                            // Error ketika card classnya kosong\n                            await thrownAnError('Item class is empty', itemClass?.length == 0);\n                            // Aksi memilih salah satu card class\n                            await itemClass[faker.helpers.arrayElement([0, 1, 2])].findElement(By.css('h1.title')).click();\n                            \n                            // Aksi mengklik tab materi pada detail class\n                            let itemTabs = await driver.findElements(By.css(\".item-tab\"));\n                            itemTabs[1].findElement(By.css('span')).click();\n                            // Aksi menunggu list materi untuk muncul\n                            await driver.sleep(5000);\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.executeScript(\"return document.querySelector('#courses .card .card-body .row .col');\");\n                                const innerText = await emptyCourse?.getText();\n                                return innerText != 'Memuat..';\n                            });\n                            \n                            // Aksi meng-hover icon edit dan mengkliknya\n                            let listCourse = await driver.executeScript(`return document.querySelectorAll(\".card .card-body .header\")`);\n                            await thrownAnError('Courses on detail classroom is empty', listCourse?.length == 0 || listCourse == null);\n                            // Aksi mengklik add modul dari salah satu course yang telah di seleksi / di pilih\n                            let course = await listCourse[0];\n                            await course.findElement(By.css('.modul')).click();\n                            await driver.wait(until.elementLocated(By.css(\"#module-forms\")));\n                            // Aksi mengisi form untuk membuat materi baru\n                            let {\n                                titleModule,\n                                descriptionModule,\n                                multipleFileItems,\n                                typeCourse\n                            } = await createData(driver);\n                            titleModule = await driver.findElement(By.id('Judul *'));\n                            multipleFileItems = await driver.executeScript(\"return document.querySelectorAll('.multifile-value-container .multifile-item');\");\n                            typeCourse = await driver.findElement(By.css('.vs__selected'));\n                            \n                            let dataTitleModule = await titleModule.getAttribute(\"value\");\n                            // Periksa apakah semua elemen telah terisi\n                            const isAllFilled = await Promise.all([\n                                titleModule.getAttribute('value'),\n                                multipleFileItems?.length,\n                                typeCourse.getAttribute('innerText')\n                            ]).then(values => values.every(value => value != '' || value != 0));\n                            \n                            if (isAllFilled) {\n                                await driver.findElement(By.css(\"button[type='submit']\")).click();\n                                await driver.wait(until.elementLocated(By.css(\".alert.alert-success\")));\n                            }\n                            \n                            const alertSuccess = await driver.executeScript(\"return document.querySelectorAll('.alert.alert-success')\");\n                            \n                            // Aksi menunggu list materi untuk muncul\n                            await driver.wait(until.elementLocated(By.css(\"#courses .card-body\")));\n                            await driver.sleep(2000);\n                            await driver.wait(async function () {\n                                let emptyCourse = await driver.findElement(By.css(\"#courses .card .card-body .row .col\"));\n                                const innerText = await emptyCourse?.getAttribute('innerText');\n                                return innerText !== 'Memuat..';\n                            });\n                            \n                            // Aksi mendapatkan semua course setelah memasukkan data atau membuat data baru & mendapatkan data yg sudah di buat sebelumnya\n                            const modules = await driver.findElements(By.css(\".card-body .content-wrapper h4.title\"));\n                            let findModule = [];\n                            for (let index = 0; index < modules?.length; index++) {\n                                if (await modules[index].getAttribute('innerText') === await dataTitleModule) {\n                                    findModule.push(modules[index]);\n                                }\n                            }\n                            expect(isAllFilled, 'Expect all input value is filled').to.equal(true);\n                            expect(alertSuccess?.length, 'Expect show alert success after created a new data').to.equal(1);\n                            expect(findModule?.length, 'The data returned should expect one data because it has previously created a new data').to.equal(1);\n                            const pageUrl = await driver.getCurrentUrl();\n                            expect(pageUrl, 'Expect return or back to detail classroom').to.include('dashboard/classroom');\n                        } catch (error) {\n                            expect.fail(error.stack);\n                        }",
              "err": {},
              "uuid": "731d041a-e9e4-49bc-8f24-1d9641c98ac0",
              "parentUUID": "b973aa91-fd88-425e-a6ae-020d459fbc64",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "731d041a-e9e4-49bc-8f24-1d9641c98ac0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 36388,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "app/dashboard/classroom/course/module/create/[status]-[datetime]-report",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "cdn": "true",
        "timestamp": "longDate",
        "overwrite": "false",
        "reportDir": "testResults/reports",
        "reportFilename": "app/dashboard/classroom/course/module/create/[status]-[datetime]-report",
        "reportPageTitle": "Laporan-Harian-Testing"
      },
      "version": "6.2.0"
    }
  }
}